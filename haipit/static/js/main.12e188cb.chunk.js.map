{"version":3,"sources":["store/actionTypes.js","store/actions/goToPage.js","components/Post/PostLoader.jsx","components/Post/index.jsx","components/PostList/index.jsx","containers/PostsLink.js","components/Header/index.jsx","containers/HeaderLink.js","App.jsx","serviceWorker.js","store/reducers/index.js","index.jsx"],"names":["SET_POSTS","SET_POSTS_LOADER","goToPage","page","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","getState","_ref","API_PATH","req","_ref3","posts","totalPages","newsPerPage","currentPage","lastPage","wrap","_context","prev","next","type","types","fetch","concat","sent","json","data","total","per_page","current_page","last_page","payload","t0","console","error","stop","this","_x","_x2","_x3","apply","arguments","PostLoader","props","react_default","createElement","react_content_loader_es","assign","height","width","speed","primaryColor","secondaryColor","x","y","Post","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","_this$props","isLoading","title","description","timestamp","clicks_count","source","link","PostLoader_PostLoader","className","datetime","DateTime","fromMillis","toLocaleString","DATE_MED","href","target","rel","dangerouslySetInnerHTML","__html","fa","Component","PostList","_React$Component","routeParams","id","length","map","post","Post_Post","renderPosts","React","PostsLink","connect","HeaderComponent","selected","_this","history","push","pageId","dist_default","previousLabel","size","nextLabel","breakLabel","breakClassName","pageCount","initialPage","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","Header","withRouter","HeaderLink","App","match","params","Boolean","window","location","hostname","loadingPosts","initialState","store","createStore","state","undefined","action","objectSpread","applyMiddleware","thunk","withExtraArgument","node","document","getElementById","ReactDOM","render","es","BrowserRouter","Route","path","component","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12e188cb.chunk.js","sourcesContent":["export const SET_POSTS = \"SET_POSTS\";\nexport const SET_POSTS_LOADER = \"SET_POSTS_LOADER\";","// @flow\n\nimport * as types from '../actionTypes';\n\nexport function goToPage(page) {\n    return async (dispatch, getState, {\n        API_PATH\n    }) => {\n        try {\n            dispatch({\n                type: types.SET_POSTS_LOADER\n            });\n\n\n\n            const req = await fetch(`${API_PATH}news?page=${page}`);\n            const {\n                data: posts,\n                total: totalPages,\n                per_page: newsPerPage,\n                current_page: currentPage,\n                last_page: lastPage\n            } = await req.json();\n\n            dispatch({\n                type: types.SET_POSTS,\n                payload: {\n                    posts,\n                    totalPages,\n                    currentPage,\n                    newsPerPage,\n                    lastPage\n                }\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n}","import React, { Component } from \"react\";\nimport ContentLoader from \"react-content-loader\";\n\nexport const PostLoader = props => (\n  <ContentLoader\n    height={300}\n    width={300}\n    speed={2}\n    primaryColor=\"#1a1f2d\"\n    secondaryColor=\"#2a2f3d\"\n    {...props}\n  >\n    <rect x=\"0\" y=\"0\" width=\"300\" height=\"30\" />\n    <rect x=\"0\" y=\"35\" width=\"300\" height=\"230\" />\n    <rect x=\"0\" y=\"270\" width=\"70\" height=\"30\" />\n    <rect x=\"75\" y=\"270\" width=\"40\" height=\"30\" />\n    <rect x=\"120\" y=\"270\" width=\"180\" height=\"30\" />\n  </ContentLoader>\n);\n","// @flow\n\nimport React, { Component } from \"react\";\nimport { DateTime } from \"luxon\";\nimport { FaEye, FaCalendarTimes } from \"react-icons/fa\";\nimport \"./post.scss\";\nimport { PostLoader } from \"./PostLoader\";\n\nexport class Post extends Component {\n  render() {\n    const {\n      isLoading,\n      title,\n      description,\n      timestamp,\n      clicks_count,\n      source,\n      link\n    } = this.props;\n\n    if (isLoading) {\n      return <PostLoader className=\"post\" />;\n    }\n\n    const datetime = DateTime.fromMillis(timestamp * 1000).toLocaleString(\n      DateTime.DATE_MED\n    );\n\n    return (\n      <div className=\"post\">\n        <div className=\"header\">\n          <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n            {title}\n          </a>\n        </div>\n        <div className=\"content\">\n          <div dangerouslySetInnerHTML={{ __html: description }} />\n        </div>\n        <div className=\"footer\">\n          <div className=\"footer-bottom\">\n            <div className=\"datetime\">\n              <FaCalendarTimes /> {datetime}\n            </div>\n            <div className=\"views\">\n              <FaEye /> {clicks_count}\n            </div>\n            by @\n            <div className=\"source-name\">\n              <a href={source.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                {source.title}\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React from \"react\";\nimport { Post } from \"../Post\";\nimport \"./posts.scss\";\n\nexport class PostList extends React.Component {\n  //   componentDidMount() {\n  //     const { routeParams, currentPage } = this.props;\n\n  //     const pageId = routeParams.id || currentPage;\n\n  //     this.props.goToPage(pageId);\n  //   }\n\n  componentWillReceiveProps({ routeParams }) {\n    if (\n      this.props.routeParams.id !== routeParams.id ||\n      this.props.posts.length === 0\n    ) {\n      this.props.goToPage(+routeParams.id);\n    }\n  }\n\n  renderPosts() {\n    const { posts } = this.props;\n\n    return posts.map(post => <Post key={post.id} {...post} />);\n  }\n\n  render() {\n    return (\n      <div className=\"posts-wrapper\">\n        <div className=\"posts\">{this.renderPosts()}</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport {\n    connect\n} from 'react-redux'\n\nimport {\n    goToPage\n} from '../store/actions'\n\nimport {\n    PostList\n} from '../components/PostList'\n\nconst mapStateToProps = ({\n    posts,\n    currentPage\n}) => ({\n    posts,\n    currentPage\n})\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        goToPage: (page) => dispatch(goToPage(page))\n    }\n}\n\nexport const PostsLink = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PostList)","import React, { Component } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./header.scss\";\nimport { FaLongArrowAltRight, FaLongArrowAltLeft } from \"react-icons/fa\";\n\nclass HeaderComponent extends Component {\n  goToPage = ({ selected }) => this.props.history.push(`/page/${selected + 1}`);\n\n  render() {\n    const { routeParams, lastPage } = this.props;\n    const pageId = routeParams.id ? routeParams.id : 1;\n\n    return (\n      <div className=\"main-header\">\n        <div className=\"logo\" />\n        <div>Новости</div>\n        <div className=\"pages\">\n          <ReactPaginate\n            previousLabel={<FaLongArrowAltLeft size={16} />}\n            nextLabel={<FaLongArrowAltRight size={16} />}\n            breakLabel={\"...\"}\n            breakClassName={\"break-me\"}\n            pageCount={lastPage}\n            initialPage={pageId - 1}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            onPageChange={this.goToPage}\n            containerClassName={\"pagination\"}\n            subContainerClassName={\"pages pagination\"}\n            activeClassName={\"active\"}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Header = withRouter(HeaderComponent);\n","// @flow\n\nimport {\n    connect\n} from 'react-redux'\n\nimport {\n    goToPage\n} from '../store/actions'\n\nimport {\n    Header\n} from '../components/Header'\n\nconst mapStateToProps = ({\n    totalPages,\n    currentPage,\n    newsPerPage,\n    lastPage\n}) => ({\n    totalPages,\n    currentPage,\n    newsPerPage,\n    lastPage\n})\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        goToPage: (page) => dispatch(goToPage(page))\n    }\n}\n\nexport const HeaderLink = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Header)","// @flow\n\nimport React, { Component } from \"react\";\nimport \"./App.scss\";\nimport { PostsLink } from \"./containers/PostsLink\";\nimport { HeaderLink } from \"./containers/HeaderLink\";\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <HeaderLink routeParams={this.props.match.params} />\n        <PostsLink routeParams={this.props.match.params} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow\n\nimport * as types from '../actionTypes';\n\n\nconst loadingPosts = [1, 2, 3, 4, 5, 6].map(id => ({\n    id,\n    isLoading: true\n}))\n\nconst initialState = {\n    posts: [],\n    currentPage: 1\n};\n\nexport default function reduce(state = initialState, action = {}) {\n    switch (action.type) {\n        case types.SET_POSTS:\n            return {\n                ...state,\n                ...action.payload\n            };\n        case types.SET_POSTS_LOADER:\n            return {\n                ...state,\n                posts: loadingPosts\n            }\n        default:\n            return state;\n    }\n}","// @flow\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport \"./index.scss\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./store/reducers\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nconst store = createStore(\n  reducers,\n  applyMiddleware(\n    thunk.withExtraArgument({\n      API_PATH: \"https://api.haipit.news/api/v2/\"\n    })\n  )\n);\n\nconst node = document.getElementById(\"root\");\n\nif (node) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router>\n        <div>\n          <Route path=\"/page/:id\" component={App} />\n        </div>\n      </Router>\n    </Provider>,\n    node\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}